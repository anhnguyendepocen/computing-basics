= Computing Basics =

== Computing Basics ==

This is a compilation of _basic_ things everyone should know about
computing, on various related topics.

=== Main Topics ===

* https://github.com/brianhigh/computing-basics/wiki/tldr[Top Tips]
* https://github.com/brianhigh/computing-basics/wiki/networking[Networking]
* https://github.com/brianhigh/computing-basics/wiki/security[Security]
* https://github.com/brianhigh/computing-basics/wiki/resource_management[Resource
Management]
* https://github.com/brianhigh/computing-basics/wiki/files[Files]
* https://github.com/brianhigh/computing-basics/wiki/data[Data]
* https://github.com/brianhigh/computing-basics/wiki/big_data[Big Data]
* https://github.com/brianhigh/computing-basics/wiki/cloud_computing[Cloud
Computing]
* https://github.com/brianhigh/computing-basics/wiki/version_control[Version
Control]
* https://github.com/brianhigh/computing-basics/wiki/programming[Programming]

=== About This ===

We are compiling a list of basic "things people should know" about
computing and information technology, generally for professional and
academic careers. The target audience is "non-technical", smart people
who know little or nothing about the technical details of computing, the
Internet, security, etc. or how any of it actually "works".

See our https://github.com/brianhigh/computing-basics[file repository]
for project-related information and a list of
https://github.com/brianhigh/computing-basics/blob/master/README.md[contributors].


=== Copyright, License and Disclaimer ===


Find latest version of this document online at:
https://github.com/brianhigh/computing-basics/wiki Copyright Â© The
https://github.com/brianhigh/computing-basics[Computing Basics Team].
This information is provided for educational purposes only. See
https://github.com/brianhigh/computing-basics/blob/master/LICENSE[LICENSE]
for more information.
https://creativecommons.org/licenses/by/4.0/[Creative Commons
Attribution 4.0 International Public License].


== In a hurry? Top Tips ==

*_Backups!_*

____
_No recent backups? Do it now. Otherwise, you gamble, worry, panic, then
cry._
____

*_Be resourceful!_*

____
_Search the 'net, read the docs, experiment (with caution), and ask for
help (if needed)._
____

*_Think ahead!_*

____
_Plan for change, allow for failure, budget for maintenance, and
schedule replacement._
____

*_Pay attention!_*

____
_Check your security and privacy settings. Be careful what you download
or post online._
____

*_Get organized!_*

____
_Store files in sensible hierarchy of folders with meaningful names.
Keep it tidy._
____

*_Centralize!_*

____
_Store shared files on a secure server and minimize passing copies
around (by email)._
____

*_Save time and effort!_*

____
_Use keyboard shortcuts to minimize point-n-click. Automate with
scripting and plugins._
____

== Networking ==

=== Introduction ===

* Computers, phones, tablets, etc. communicate using wired and/or
wireless networks, for example the network known as "the Internet".
* Network communications are facilitated by various protocols, for
example HTTP (web) and SMTP (email), Ethernet, and WiFi.
* The networking technologies and their protocols are designed to be
modular and are organized into several layers.
* The use of standards (technologies, protocols, frameworks, etc.) makes
networking easier to use and troubleshoot. Knowing a little about these
standards will help you make better use of computer networks.
* These technical standards are defined in public documents (RFCs, etc.)
and are developed openly by international working groups. Anyone can
read these documents to understand the protocols and learn how they work
together.

=== Reliability ===

* Computer networks are useful, but not entirely reliable. If it is
really important that a communication is made, then email, text, etc.,
may not be sufficient. Use a telephone or some other means of real-time
communication if reliability is important. Although using computers or
the Internet may be a convenient way to communicate, it may not be the
best way in certain circumstances.

=== Wired vs. Wireless ===

* All else being equal, for a typical computer workstation or laptop, a
wired (e.g, Ethernet) network connection will generally be more
reliable, faster, and more secure than a wireless (e.g, WiFi) one.
* If you are using a wired connection, but your device also has wireless
enabled, you will save energy and possibly improve your network
performance by disabling the wireless while you are wired. Some newer
devices will do this for you by default, but check on this.

=== Device Management ===

* Keep your devices up-to-date on security patches, plugins, firmware,
anti-virus, etc. While this is a standard security practice, it will
also help fix certain problems caused by version incompatibilities and
bug fixes. Be careful, though, as some bug fixes and updates may create
bigger problems than they solve. Some firmware updates can "brick" a
device. If in doubt, search online for bug reports about updates before
applying them.
* Manage your personal WiFi network(s) and know how to log in to your
router's administrative features.
* Make sure to consult the router manual and configure the highest
encryption available, and use a complex password featuring case
sensitivity and special characters for both the router's WiFi network
and the router's administrative features.

=== Troubleshooting ===

==== General Concepts ====

* Do network troubleshooting starting with the devices closest to your
machine and then moving outward. For example, try accessing your own
router (via ping or its web interface) or another machine on your local
network before concluding your Internet connection is down. That way if
it's a local problem, you don't waste time on hold with your service
provider's technical support.
* Given that professionally managed networks are generally well designed
and maintained, a poor network connection is most likely caused by a
fault at your end (your device), especially if you are using a wireless
connection. The most common exceptions would be a network outage at your
service provider or somewhere else along the route, but those will be
relatively rare compared to problems you may have with your own
equipment.
* Out of all of the equipment in the chain, your personal equipment is
usually the weakest link. The reason is that most people are using
consumer-grade equipment (desktops, laptops, phones, tablets, home
routers, etc.) with relatively cheap components, more unstable software,
in a less protected environment, whereas the rest of the devices in the
chain are generally industrial-grade telecom equipment and servers built
with more rugged components, housed in more secure locations with
adequate cooling and redundant power, and are more rigorously tested,
monitored, and serviced.
* All of the various links in the route between you and the remote site,
etc., need to be working properly. If your computer seems to be fine and
the site seems fine, but there is still a problem, the cause may be a
router or switch between you and the other system.
* Take some time to learn about concepts such as domain name servers,
routing, NAT, etc., as this knowledge will help your troubleshooting
efforts immensely, saving a lot of time and frustration (yours and those
who help you).

==== Troubleshooting tools and techniques ====

* If you are having a problem with an application that uses networking,
such as your web browser or your email client, check networking with
another application, website, device, etc., try to narrow the possible
causes. There are many layers of technology that must all be working
together properly, and by limiting the variables, you are more likely to
determine the most likely source of the problem.
* First, if using wireless, make sure the wireless feature is enabled,
switched on, etc., or if using a wired connection, check your network
cable is plugged in (both ends), then check the link light on your
computer and the network equipment (router, switch, etc.), making sure
any network devices are powered on, then check if you have been assigned
a valid IP address.
* Know how to find your IP address, MAC address and DHCP settings; these
are key pieces of information needed to get help from your network
service provider.
* Learn to do a network "ping" and how to interpret the results. This is
an invaluable troubleshooting tool that comes with most popular desktop
and laptop computer systems. Ping and "traceroute" (tracert) can help
you find the network hops (routes) which may be down or slow.
* Just because you can make a "good" wireless connection, does not mean
that the router (access point) you have connected to will actually
provide you with Internet access. It's own connection to "the outside"
may be down, it may require some sort of authentication (or payment), or
it may simply not be configured properly.

==== Performance ====

* If your wireless connection is slow, check on the quality of the
connection (how many "bars") and also consider interference (from
microwave ovens, other network users such as in a large lecture hall,
etc.). If possible, move closer to the router (access point) with a more
direct "line of sight".
* Even if the network is working perfectly, you still may not get the
results you are expecting. You may see slow data transfer on what should
be a fast network connection. The bottleneck may be the application you
are using, extra computational overhead such as compression or
encryption, network congestion on one or more links along the route, or
simply that there are a lot of hops between you and the destination,
each one adding additional overhead and latency. Just because the
endpoints have fast connections does not mean that all of the links
between them also have fast connections.
* If your browser is slow to open or load the start page, you may want
to choose a "blank page" or a simpler page as your start page. Likewise,
web pages with large images, animation, advertisements, or interactive
content will often be slower to load than simple pages with basic
content. You can use browser plugins such as FlashBlock, AdBlock, and
NoScript to limit the amount of extraneous content that your browser
will process as the page loads. This will speed up your browsing
experience and also reduce the load on your network connection and your
computer.

== Security ==

=== Introduction ===

* _Information_ security is about protecting information from
unauthorized use as well ensuring availability for authorized use.
_Computer_ security is this practice applied specifically to computing
devices, networks, services, and data.
* As computer security is a "practice", not a "product", it depends on
people, policies, training and behavior every bit as much as (and
arguably much more than) software and hardware.

=== Be Smart ===

* Some believe that security and convenience are mutually exclusive,
that as one increases, the other will decrease. The presumption is that
security measures make a system harder to use. This is not necessary
true, but having some degree of both security and convenience requires a
smarter approach, carefully engineering the system so that the most
secure behavior is also the easiest and most compelling.
* Encourage a security-minded culture in your home or workplace. This
will make it easier to develop and practice secure habits.
* You are ultimately responsible for the security of your computing
experience. Take an active role. Learn and understand basic security
concepts. Engage in the computing behaviors or "hygiene" which will give
you the level of security you need while still maintaining the level of
usability you desire. Be smart.

=== Manage Risks ===

* Like the old adage, "out of sight, out of mind", risks not seen are
easier to ignore. "Ignorance is bliss" ... until it isn't.
* Make an effort to see the practical risks of various online behaviors
and how they might put you at risk personally, financially, and
socially.

==== Personal Risk Assessment ====

* Ask yourself, "What do I have which I need to protect? How valuable
are those things to me?"
* Consider the value of your property, your personal safety, your legal
identity, your social reputation, your financial assets, your employment
status, and your career/future. All of those, and those of your friends,
family members, coworkers, employer, etc. are all valuable assets which
you may put at risk with your online activity.
* Consider threats such as identify theft, compromised bank accounts,
stolen credit card numbers, stolen account credentials, investment
scams, computer virus infections, loss of data, internet stalking, and
disclosure of personal information resulting in social embarrassment,
discrimination, persecution, hate crimes, loss of employment, property
theft, or personal injury.
* Evaluate how vulnerable you might be to each of those threats. This
depends largely on your behavior.
* You can estimate the risks you face as the product of
http://en.wikipedia.org/wiki/IT_risk[Threat Ã Vulnerability Ã Asset
Value].
* Now modify your behavior (including computing practices and online
habits) to manage those risks.

=== Tools and Techniques ===

==== "End-users" View ====

* When most computer-savvy people think of computer security, they think
of: usernames, passwords, anti-virus software, security patches,
firewalls, and encryption.

==== "Computer Administrators" View ====

* Computer administrators and other computer professionals will also
think of configuration: disabling unneeded services and accounts,
changing default passwords, tightening access controls and firewall
rules, strengthening security policy settings, alerts, logging,
monitoring, backups, redundancy, and load balancing.
* They also take physical security measures such as installing locks,
cameras, and alarms.
* They often have to prove their systems are compliant with various
regulations, so they will also think of documentation, audits and
penetration tests.
* Further, they will stay current with the latest security news alerts
about new threats and respond accordingly.
* Regardless, all of these tools and measures are useless if people
subvert them with insecure practices. So professionals will also create
policies, find ways to enforce them, and educate their organization
about the importance of secure practices. In this way, they encourage a
culture of secure computing.

==== Your View ====

* Since the practice of security involves addressing risks in all links
of the chain, you do not want to be the weakest link.
* There is no reason why you should limit your practices to only those
commonly known by "the masses".
* Consider investigating and utilizing the practices, tools and
techniques of the professionals.

=== Best Practices ===

The majority of the "best practices" listed below came directly from our
https://github.com/brianhigh/computing-basics[contributors], based on
their professional and personal experiences, as well as their general
knowledge of the practices commonly promoted by information security
professionals. The University of Washington's
http://ciso.washington.edu/resources/smart-computing/[Smart Computing]
page was also consulted as a reference. You are encouraged to compare
this list against the many available online.

Think critically about any security advice you read or receive, from any
source. This information is provided for educational purposes only.
Please see our
https://github.com/brianhigh/computing-basics/blob/master/LICENSE[license
and disclaimer] if you are unclear about this.

==== Basic Security Essentials ====

* Secure devices with locks, passwords, encryption, anti-virus software
and host firewalls.

==== Software Installation and Updates ====

* Keep software updated, especially anti-virus software.
* Maintain your computer just like you do your car or yourself. If you
neglect any of these, they will eventually fail.
* Exercise caution when installing _anything_, especially 'free' or
'shareware' software hosted by popular, often glitzy download sites.
* Some software installers come bundled with stuff you don't want so
it's best to actually look at and read the prompts rather than just
clicking next, next, next.
* If you are prompted to update software, make sure it is a legitimate
prompt before you agree to the update. Be wary of fake updaters for
plugins, like bogus "Flash" updaters which may install malware.

==== Accounts and Passwords ====

* Log out or lock your screen when unattended. Otherwise someone could
walk up and impersonate you - or worse.
* Don't share computer accounts. Make sure everyone has their own
accounts. If you have shared your password with someone, change the
password immediately.
* Use strong passwords. This means ones which are very long and/or very
random. Mix upper and lower case letters, punctuation symbols and
numbers. This increases the difficulty of cracking the password.
* Change a password promptly if it could have been seen by others, or if
there is any indication what your account has been compromised.
* Changing passwords regularly may be required if
http://en.wikipedia.org/wiki/Password_policy#Password_duration[password
expiration] policies are enforced.
* Don't use the same password for many accounts.
* If your passwords must be "written down", protect them with encryption
in a password manager.
* Avoid telling your applications to "remember" your password.
* Don't use personal facts (such as birth date, birth place, etc) for
answering security questions. A large number of personal facts are
public record or readily available via social media.
* As an alternative, give answers that don't actually answer the
question, e.g. if they ask for birth place, give them the color blue.
* Only use administrative accounts for specific administrative tasks.

==== Data Security ====

* Know your data, safeguard it, and back it up regularly to multiple
locations.
* Encrypt local backups if possible and practical, especially anything
sensitive.
* Encrypt off-site backups, especially those stored on systems that you
don't control, like "in the cloud".
* Purge data that you don't need to keep. Otherwise it is just a
liability.

==== Internet Security ====

* Know that Internet-connected devices are always under attack. For
example, see: http://cybermap.kaspersky.com/[Kaspersky Cyberthreat
Real-time Map]
* Check email links before clicking on them. Attachments and web links
can hide attacks.
* If you receive a questionable attachment from someone you know, it's a
good idea to contact them via a known contact method to confirm they
sent it, before opening it.
* Check the encryption status of secure web pages with the "lock" icon
(near the address bar in your web browser) and confirm that their web
addresses begin with the "https://" prefix.
* Assume anything you post online can be read by anyone and can never be
deleted.
* Configure the security and privacy settings on your social media
accounts to limit exposure of personal information.
* Know that even with tight security and privacy settings you are still
exposing yourself to some degree.
* Once a document (or any file) has been shared or sent, you've lost
control of it.
* Before sharing something, be sure you can trust the recipient to honor
any restrictions placed on it.

==== Security Culture, Training, and Help ====

* Take responsibility for your own security. Don't just expect IT, your
ISP, or your vendor to do it for you.
* Take a basic computing security class, such as:
http://irtsectraining.nih.gov/publicUser.aspx[NIH Information Security
and Privacy Training Courses]
* Don't assume that your family or coworkers practice safe computing.
Helping them will help yourself.
* Your workplace may _require_ you do actively take certain security
measures and operate your computing equipment according to specific
practices such as those listed here. Find out what those measures and
practices are and put them into action.
* Regarding any suspicious computing event or security-related incident,
if in doubt, check first with your IT support staff, or, if you have no
IT support, then with the designated information security officer for
your organization, if any, or with your supervisor or manager, or else
with a _knowledgeable_ coworker or friend, etc., your Internet service
provider, software or computer vendor, or, at the very least, consider
doing some investigation on the matter using reliable Internet sources.

=== Encryption ===

* Encryption is the encoding and decoding of data.
* Usually this is done mathematically in software or in specialized
hardware.
* It allows you to protect information so that some "secret" (key) is
needed to access (decrypt) the data.
* While the encrypted data is safer when properly encrypted, one must
carefully guard the secret key.
* Encryption can be used for secure storage by encrypting files,
folders, volumes, and disks.
* Encryption can encrypt data in transit, creating a protected tunnel
that unencrypted ("clear text") data can pass through.

==== Network Encryption (in Transit) ====

* Usually passwords are encrypted in transit when logging into a system.
The system will also store a "password hash" on the system to compare
against the password you have sent. The hashed password is one-way
encrypted so that it can still be used to authenticate you, but cannot
be used by someone else. That is, the administrator (or some attacker)
cannot decrypt (look up) the password from the hash. If you forget the
password, it must be reset.
* Web servers can use encryption for data in transit. When you access a
web page using an HTTPS address, the browser will attempt to set up an
encrypted connection to the web server. If this fails, or there is a
certificate error, you will see an error message. You may choose to
ignore the error and proceed anyway. If you do, then most web browsers
will indicate the status of the encrypted connection with a warning icon
or discolored "padlock" icon by the web address in the address bar.
Otherwise, if the connection proceeds without error, then there will
usually be a padlock icon with some indication of success such as a
"green" color or "closed" image. You may investigate the certificate
status by clicking this icon and viewing the encryption details.
* Many other network services use encryption. For any network site you
visit or service you use, look into whether or not encryption is used
and how you might configure it or validate that it is working.

==== File Encryption (in Storage, at Rest) ====

* As for encrypting files, you can use the encryption features of
archiving software like 7-Zip, WinZip, etc., use a more general-purpose
tool like GnuPG, or the file or disk encryption features of your
operating system or device.
* People should encrypt sensitive files if stored locally and before
sending them over the Internet or any other untrusted network. The
person on the receiving end needs to know how to decrypt the files, so
you will need to coordinate with that person to make sure that they have
the software and decryption key and know how to use them. You need to
find a secure way to send the decryption key.
* Public key cryptography systems like GnuPG solve this particular
problem, but are a little more complicated to use.
* So, with a simpler system where there is a shared key, you need to
send the key using some other means where there is no reasonable chance
that someone might intercept it. For lower-security needs, a telephone
call might suffice, or meeting in person, or using a secure web server
(e.g., with a one-time web link) as a means for key exchange.
* Don't ever email passwords unless you use encryption like GnuPG to
protect the password. However, if you have this type of encryption set
up with the recipient, then you could just use GnuPG to encrypt the file
and dispense with the need to encrypt a password. That is the whole
point of public key cryptography systems like GnuPG.

==== What Encryption Isn't ====

* Encryption is not some "magic pixie dust" that you can sprinkle on
yourself to make you safe.
* You have to use it intelligently along with all of the other
recommended security practices.
* Don't just rely on one tool like encryption to solve all of your
problems.

=== Insecurity ===

* Nothing is completely secure. You have to determine what you are
trying to protect and what you need to protect it from, then manage that
risk in a practical way that you can afford.
* A computer with an Internet connection is constantly under attack.
Automated "bots" are constantly scanning all internet addresses,
including the one your computer is using, to find open "ports", or
network services.
* These attackers are hoping that your system has a buggy or
misconfigured service that can be exploited to take control of your
system and use it for finding more vulnerable systems, sending spam,
phishing messages, malware, harvesting passwords, installing trojan
back-doors, etc.

==== System Compromises ====


* Assume your system will be compromised and that your data will be
accessed without authorization. With this attitude, you will be
motivated to take realistic measures to protect your systems and data
instead of simply relying on faith in some product or feature -- or
just worrying without actually doing something about it.
* This is where getting serious about backups comes in, especially
encrypted, off-site backups allowing you to perform a "bare metal
restore" -- reinstalling the entire system from a backup onto a new,
fresh, blank disk.
* You cannot reasonably expect to "remove" or "clean" a virus, trojan,
or other malware since you don't know what else might have been
installed once the system was compromised.
* Even if the system appears to be working normally again, that does not
prove it is secure. There could still be a "back door" or "password
sniffer", "key logger", etc.
* Therefore, the best and arguably _only_ course of action after a
compromise (and after any forensic measures have been taken) is to
completely "redo" the system from scratch with a fresh install of all
all software.
* Forensic measures include any investigation of the system you might do
in order to find out what really happened or who might have compromised
the system.
* Usually this means removing any storage device, like a hard drive,
immediately and making a copy of it for analysis, leaving the original
drive unmodified and disconnected during analysis.

==== Email Insecurity ====

* Email is not private or secure.
* Even if your connection to the mail server is encrypted (scrambled) in
transit, the email itself (in storage) is not, unless you took some very
specific steps to encrypt the contents of the email.
* Very few people actually encrypt the contents of their email messages,
know how to, know that it's possible, or even know what it means.
Practically speaking, this is the realm of geeks, hackers, criminals,
spies, and the military. But some ordinary people do occasionally
encrypt attachments, such as Zip files and PDFs. Generally, most people
don't.
* In this discussion, we will assume that your email messages are not
encrypted (in storage). Even if they were, they would eventually be
decrypted by the recipient, and you cannot control what happens to the
message once that has happened.
* Email messages are usually passed from server to server and router to
router without any encryption (in transit). Even if the servers did use
encryption to pass email, the message would be stored on the servers
unencrypted.
* Anyone with administrative access to the mail server, or has "hacked
into" that server, could read your message.
* Most of the efforts to secure email are spent on preventing spammers
from abusing mail servers, not on the privacy of your email messages.
* Once the message arrives at its destination, in the mailbox of the
intended recipient, on their computer, it can be read by anyone with
administrative access to that computer. How much do you trust the
recipient or the recipient's family members (or coworkers) to keep your
"secrets"?
* Therefore, think of an email like a "post card" and do not use email
for sensitive communications.
* Do not trust that the actual sender of a message is the address listed
in the "From" header. Email messages are easily and often forged. So, as
stated earlier, do not trust links or attachments in emails and confirm
with the sender if in doubt about any email or attachment which you may
have received from them.
* While it is possible to digitally (cryptographically) sign a file or
some text, as in an email, most people never do, know how to, etc., as
with encryption. Here, again, a tool like GnuPG can be used, as well as
other public key infrastructure (PKI) utilities. Many email clients have
support for this built-in, or it can be added with a plugin. Using
digital signatures can then be used to validate a sender and the
contents of the message as being legitimate.

== Resource Management ==

=== Introduction ===

Computing Resource Management is making the best use of computing
resources such as CPU, memory, storage space, bandwidth, etc. From a IT
project management perspective, this includes areas such as requirements
analysis and capacity planning. The idea here is to predict resource
requirements ahead of when you actually need them. You don't want to be
scrambling for computing power at the last minute. And once the project
is going, you want to know how to verify that you do have the resources
you actually need and are using them most effectively.

=== A General Approach ===

Pick the right tool for the job.

Workstation or Server, define your goals and scope of the project. Take
a hard look at the job at hand, evaluate what it will take accomplish
the task cost effectively.

Take into consideration:

* vendor longevity
* ease of use
* budget
* security
* user base
* performance
* maintenance

Start with software; Find a "tool", application or suite of applications
that will meet your project goals without a lot of extras.

Pick an operating system that will run the tool of choice and provide a
low total cost of ownership.

Last, pick hardware that will best host your OS and application of
choice, will meet the current requirements, and have a high probability
to meet the future requirements for the next 5 years.

=== Estimating CPU, RAM, and Storage Needs ===

==== Know Your Data ====

The first step in resource planning is determining how much data you'll
be working with. How that's determined depends on where the data is
coming from. If it's from an instrument, take a single sample, and just
multiply how many samples you'll take. It's a good idea to include a
margin of error, perhaps 10 to 20% extra, just in case. If the data is
coming from an outside source, they may have a rough idea, if they've
provided similar data to someone else.

==== Know Your Tools ====

Once you have the amount of data, it's possible to work out some rough
ideas on other resources needed. However, two more questions must
answered. How quickly do you need your results? And, what tools do you
plan to use?

If your tools require storing data in RAM for processing, then your RAM
needs will be directly impacted by the size of your dataset. So, if you
find yourself with 10s to 100s of gigabytes of data, it may be wise to
reconsider the tools being used, as there may be alternatives that can
process data in chunks from disk. If you can't change tools, then if
your dataset is, say 64GB in size, you'll be needing 70GB+ RAM to cover
data and overhead.

==== Know Your Performance Requirements ====

How quickly you need your results, will impact CPU and disk performance
needs. The faster you need your results, the faster the CPU and disk
you'll want. But these are also relative to your dataset size. A small
amount of data, say 1GB can be read fairly quickly from a standard hard
drive. Whereas 100GB of data, will take considerably longer.

The other factor impacting CPU, is the tool selected. A single-threaded
tool for example, will benefit most from a high clock speed (GHz) CPU
with just a few cores. Whereas a heavily multi-threaded tool, will
benefit from many cores, of modest clock speed. To best determine the
CPU needs of whatever software you use, you'll want to check the
documentation or with the software's vendor.

=== An Example Scenario: Server Purchase ===

Imagine you are a researcher in a science or engineering department at a
major research university. You want a new server for a new research
study in order to perform data analysis. You look at some websites and
see that the server prices are just within your budget. So, you go the
IT dept. and ask them to make the purchase. Here are some of the
questions your IT person might ask.

==== Software and Support Questions ====

* Will you need any software installed on that server, such as an
operating system and data processing applications? What are those? Most
with commercial licenses will require that you budget for this extra
cost.
* How long will the system be in service? Can the warranty be extended
to meet your requirements?
* You should also strongly consider a support contract for your hardware
and software. This may cost roughly 10-30% per year. Are you willing to
pay this or face being "unsupported" by the vendor?
* Will you need any custom software developed? Who will write this code
and how much will it cost? Will the developer continue to support it for
the duration of the research project? If the software is developed
internally, what happens if the developer leaves the organization? Will
they continue to support their code? Under what terms? Expect to pay
roughly four times the initial development costs or more for code
maintenance.
* Who will maintain (perform updates, upgrades, repairs, monitoring) of
this server?
* Who will be the primary contact person in the research group for
ongoing support issues?

==== Performance and Reliability Questions ====

* What are the uptime/availability requirements?
* Will you need load balancing, clustering or other high-availability
features?
* Will you need high speed network connections or data connections?

==== Hosting and Maintenance Questions ====

* What are the hosting requirements? Where will this server be hosted?
How much will that cost?
* Power (UPS, generator, redundant circuits, conditioned power)?
Cooling? Physical security?
* Will the server need to be expandable? Will you need more storage
later? Long-term data archival?
* Who will maintain the server and perform backups?
* What are the decommissioning requirements?
* What spare parts can you afford to purchase? Will those be purchased
now, or will money be set aside for this?

==== Data Storage, Management and Backup Questions ====

* What kind of data storage requirements will you have?
* Will you need backups? Off-site? Encrypted?
* Have you budgeted for the cost of backups? Are you prepared to
purchase backup hardware and software?
* How much data will need to be backed-up and ho often? Will you need
(incremental) snapshots?
* How long will backups need to be archived?
* What are the data management requirements? Does your research grant
specify any?
* What are your data retention and data destruction requirements?

==== Security and Compliance Questions ====

* What are the security requirements for the project?
* Will you be storing personally-identifying (subject/patient)
information? How will that be de-identified?
* Will more sensitive data need to be stored and accessed differently
than less sensitive data? How will this be managed? Within an
application or by the operating system?
* Will anyone (like software developers or database administrators) need
special administrative access to the server? Will they also be certified
to access any sensitive data?
* Will the server need to be compliant with any government standards
such as HIPAA or FISMA? If so, are you prepared for the costs and delays
involved in meeting compliance, including documentation and auditing?

==== Collaboration and Access Questions ====

* Will you need to share research data with others? What kind of access
will they need? Who will manage that access (accounts, passwords, group
memberships)?
* Will the server use local user accounts or will it tie into some
central accounts system within the organization? Will this account
system include accounts for all collaborators, even those who come from
outside of the organization? How will those people be able to access the
server?
* Will all access be from campus or will some form of remote access
(VPN, SSH, SFTP, Remote Desktop, etc.) be required?
* If collaborators need access to sensitive data, how will they be
certified to access that data? How will the IT people know who is or not
certified when granting access to data?

==== Final Questions ====

* Are you prepared for all of these additional costs to equal or exceed
the cost of the server itself? Have you budgeted for all of this? Is
there enough money left? If not, then what?

== Files ==

=== Introduction ===

Your computing experience can be frustrating if files are not easily
found, opened, or saved. We will explore file-related concepts, some
common issues and offer some suggestions.

=== File and Folders ===

Files are stored on a computer in a nested structure, or "hierarchy", of
folders (also called "directories") and subfolders. A subfolder is just
a folder which is organized within (or "below") another ("parent")
folder. Folders can be nested many levels deep.

The topmost folder is sometimes called the "root" of the folder
hierarchy. A file placed at that top level is not considered to be in
any particular folder. On some computer systems, such as Microsoft
Windows, this top level may also be represented as a "drive", but may
not actually correlate to a physical disk drive.

File structures may be stored on the local system hardware, on another
system in a network, or distributed across many such systems. File
structures are implemented in software as a "filesystem". Hardware
devices like hard disks and flash memory devices are formatted with one
or more filesystems before files are written to them.

=== File types and formats ===

==== Text Files ====

A computer file may be "text" or "binary". Text files are strings of
characters from a standard character (such as ASCII).

Examples are:

* simple text (just characters)
* delineated text (characters separated with some special character,
e.g. CSV, comma separated variables)
* structured text (like web page code, i.e. HTML or XML, or JSON)
* computer code (characters structured as a "program", i.e. source code)

The file name could be just about anything, but often they will end with
a "suffix", usually a dot/period (.) followed with some characters
representing the file type such as txt, csv, tsv, html, html, xml, c,
py, pl, R, etc.

==== Binary Files ====

Instead of using just "plain text" characters, a file can also contain a
mixture of characters or other non-character data, such as multimedia
(images, video), compiled computer code (like an application
executable), or compressed data of any type. They are called "binary"
since their composition does not conform to any particular standard
character coding system, and thus the file can seen as merely a string
of binary digits (i.e., ones and zeros). Of course, to a computer, every
bit of information appears binary, but this sort of terminology is meant
for us humans.

Examples are (with example file suffixes):

* Compressed files (zip, tgz, rar, etc.)
* Multimedia files (gif, jpg/jpeg, png, mov, wmv, wma, mp3, mp4)
* Document files (doc, docx, xls, xlsx, ppt, pptx, pdf)
* Binary data files (Rdata, dta, mdb, sas7bdat, dbf)

Binary formats are sometimes defined in a formal standard, as is the
case with many popular multimedia formats, while others are privately
defined by vendors for use by their specific applications or products
and are not well supported by other products.

==== Open versus Proprietary File Formats ====

If development of these formats is private and closed, the formats are
often referred to as "proprietary". Alternatively, file format standards
developed in an open, public, "community" context, may be called "open"
or "open source". The same terminology is used for other technology
standards such as for network protocols or software.

The advantage of open file formats is that they are more likely to be
supported by a wider range of tools, applications, or products than a
closed "proprietary" format. This makes files easier to import, export,
and convert for use in alternative applications. While third-party
developers may "reverse-engineer" closed formats to write applications
which allow some degree of interoperability, they may not guarantee full
compatibility.

=== Default Application ===

If you try to open a file by clicking on it, your computer will try to
guess which application should be used to open it. Most computer
operating systems will look at the filename suffix and compare that
against its internal database of "associations".

Some operating systems, such a OSX, may also store an association for
the file when it is created, regardless of the filename. Since not all
operating systems operate this way, such as Windows, and as this
association can be lost during file transfer, files shared with others
should have a standard file suffix.

You can train your computer to use certain applications to open certain
files or file types. This is called, "setting the default application".
You can also simply open a file from within a particular application.
This is a handy way to work around a broken or missing association. Some
applications know how to open many different types of files.

=== Parsing and Converting ===

When files are read by an application, they are parsed in some way to
bring the file's contents into your computer's memory, as an internal
data structure. For the application to know how to parse the file, the
file needs to be in a file format that it knows about.

If an application doesn't know about a particular file type, you will
need to convert the format to a format it does know about. While you may
change the suffix of the file by renaming it, this will not change the
file format. To change the format, you need to convert it to the new
format.

Some applications can open and export files with various formats. This
is done using the familiar _File->Open_ and _File->Save As_ menu
options, or similar.

=== File organization and naming ===

When storing files on your computer, it really pays to organize the
files into a meaningful structure of folders and subfolders. What
structure should you use? Assume another person needs to find your files
and knows nothing about your folder structure. Create a folder hierarchy
starting from general and going deeper into specifics. Try to avoid
redundancy in file and path names. This will save you extra work
frustration. If your work is project based, try something like this file
path:

--------------------
projects\{name}\data
--------------------

The Â represents the levels between folders. So, \{name} is an actual
project name and "docs" is the folder for the documents relating to that
project. If you work is organized by client, or by class, etc., then
that should be at a higher level than the topics relating to those
high-level divisions. For keeping track of coursework, you might try:

--------------------------
courses\{name}\assignments
--------------------------

Where \{name} would be the actual course name, in this example file
path.

As for the naming of individual files, preferences vary, but it is good
idea to name the file with a succinct description of what the file is,
as distinct from the other files in the folder. Names are a little
restricted by allowed characters, those most are allowed these days.
File length and path length are also an issue, but the limits are
usually not an issue. You can find these limits by looking in the
documentation for your operating system.

Here is an example of a problematic file path. Can you guess why?

----
misc\stuff\joe's files\joe's work files\temp\DON'T DELETE ME!\project 1\May\project 2\old\pics\joe.xlsx
----

=== File Sharing and Collaboration ===

Sharing files is common within organizations and among collaborators.
Typically workgroups have access to a file server and sharing is simply
a matter of working with the files as they are stored there. The idea is
to work from a single copy of the file in a central location. This file
server is backed up and so the individual users do not need to worry
about this detail, nor do they have to pass copies around (e.g., through
email). They still have to manage revisions to files which change.

Remote access to the file server may be offer via secure file transfer
protocols such as SFTP, a virtual private network (VPN), or a virtual
"desktop" session like Remote Desktop, VNC, or X2Go. Since file transfer
tends to spread copies of the files around onto the computers of the
various collaborators, the other remote access options are generally
preferred for collaboration and security.

Many people are in the habit of saving a copy of a file when it is time
to make a new version, keeping the original as the previous version.
While this method works and provides a simple, but crude history of
changes, there are other more sophisticated methods, such as "track
changes" features and version control systems. Backups should not be
used as a versioning system, since system administrators usually use a
backup rotation schedule which reuses backup media, replacing older
backups with newer ones.

The central file server can also be a third-party "cloud" storage
service, such as Dropbox, Google Drive, OneDrive, SharePoint, etc. These
services offer a "free" tier and can be very handy due to "apps" for
various devices, automatic synch, and design for mobile collaboration.
The same concepts of server use mentioned above apply. However,
off-site, third-party storage may not meet security, regulatory or
service-level requirements.

The "cloud" services can offer compelling value over traditional file
servers in that collaboration features (e.g., co-authoring, portals,
workflows) are built-in, providing the experience of an integrated
application, not just a file depot. Further, these platforms provide
rights-management features in the form of "invites" which greatly
facilitates user-controlled sharing.

=== File Corruption and Repair ===

With frequent backups, you should not have to wrestle with repairing
corrupt files. Just restore them from backup. But if your backups are
not sufficient, make a note to improve them and then try the following
approach.

If a file appears to be corrupted, stop what you're doing. The
corruption may be caused by a faulty drive or media. In which case,
further activity may cause further damage.

1.  Scan the drive or media with Windows Disk Check, or on a Mac use
Disk Utility. It's also advisable to use a tool like Crystal Disk Info
to see if the drive itself is reporting what are known as SMART errors.
2.  If the drive is OK, then the file itself may have been corrupted by
an application bug. Some applications "save" temporary copies of files
in your computer's temp folder. In which case, it's wise to check it for
a recent copy.
3.  If there isn't a temporary copy, then try Windows Previous Versions
(Shadow Copy), or OS X's Time Machine. If you're fortunate, they'll have
been enabled, and may have saved a copy of the file. However, this
option generally only applies to files on your computer's hard drive,
not on portable media or network storage (which may have its own
snapshot and backup systems).
4.  If all else fails, you may have to try repairing the file. The
repairing process depends on the format (software used) and version of
the file. A search on Google for "repair X files utility", where X is
the file type should reveal some options. Popular file types like MS
Office usually have some kind of tool on the market.

== Data ==

=== Introduction ===

Data are the individual pieces of information we store in files and
share through the network. So, what applies to files, such as the
importance of backups, also applies to data. The same goes for security
principles and practices.

=== Data, Documents, and Databases ===

We may treat data differently than other information. Whereas a
document, such as a MS-Word file, may be intended only for human
readers, raw data are usually meant to be read and processed by
automated means -- by machines. The data may be queried, analyzed, and
summarized into tables and plots for human eyes, but most people do not
want to see all of the raw data directly.

Further data may grow immensely in size without slowing down the
processing. This need for scalability requires data to be managed more
carefully and thoughtfully than individual document files. This is why
data are often stored in data structures called databases. Databases are
specifically designed for efficient storage, searching, and processing
of large amounts data. Sometimes, it is easier and more practical to
store data in an individual data file than in a full-featured database
system. It really depends on your needs.

=== An Approach to Data Management ===

Start with an easily machine readable format (when possible), preferably
an open standard like CSV. This will reduce the amount of work required
to convert the input data into a usable form for the widest number of
applications.

Normalize your data. In other words, when storing data, use a consistent
format. For example, for every row of data, use the same format of
datestamp. In addition, when using a relational database, avoid
redundant data by linking related tables using a common identifier.

Use the right tool for the job. Often folks are drawn toward software
like MS-Access and File Maker due to the ease of use. However, such
tools don't scale very well, and perform poorly in multi-user
situations. If you find yourself needing a relational database, it's
best to start with something like MySQL or MS SQL, and using one of
their many graphical database management tools. While they do have a
somewhat higher learning curve, their ability to scale means, you don't
have to retool your work flow as your needs grow.

=== "Up-front" Data Planning Advice ===

* Determine up-front how important the data will be and treat it
accordingly. Take backups seriously and design and implement the best
automated backup system you can afford, then regularly audit and test
backups to make sure you can restore from them. Without good backups,
you are one small mishap away from major disaster. Who wants to live
like that?
* Determine up-front how the data will be accessed. Strongly consider
formatting your data for easy automated processing by using simple
tabular structures of rows and columns in common, flexible file formats.
Realize that you may want to collaborate with others and consider
allowing for multiuser, simultaneous, and remote access. Sharing data
files by email does not scale well and is insecure. A file sitting on a
file server will not allow simultaneous editing, and one person's edited
version will overwrite the whole file. Manually merging changes can be
extremely difficult and error-prone. Linking separate files together
properly can be challenging without specialized tools like relational
databases.
* Determine up-front how long the data will be around, and what the
plans will be when it's no longer useful. If the plan is to create
500,000 files/week for a decade, do the math and figure out if it's
practical to store and analyze these files before you're in year 8 and
things start falling apart. (True story).


## Introduction ##

Data are the individual pieces of information we store in files and share through the network. So, what applies to files, such as the importance of backups, also applies to data. The same goes for security principles and practices. 

## Data, Documents, and Databases ##

We may treat data differently than other information. Whereas a document, such as a MS-Word file, may be intended only for human readers, raw data are usually meant to be read and processed by automated means -- by machines. The data may be queried, analyzed, and summarized into tables and plots for human eyes, but most people do not want to see all of the raw data directly. 

Further data may grow immensely in size without slowing down the processing. This need for scalability requires data to be managed more carefully and thoughtfully than individual document files. This is why data are often stored in data structures called databases. Databases are specifically designed for efficient storage, searching, and processing of large amounts data. Sometimes, it is easier and more practical to store data in an individual data file than in a full-featured database system. It really depends on your needs.

## An Approach to Data Management ##

Start with an easily machine readable format (when possible), preferably an open standard like CSV. This will reduce the amount of work required to convert the input data into a usable form for the widest number of applications.

Normalize your data. In other words, when storing data, use a consistent format. For example, for every row of data, use the same format of datestamp. In addition, when using a relational database, avoid redundant data by linking related tables using a common identifier.

Use the right tool for the job. Often folks are drawn toward software like MS-Access and File Maker due to the ease of use. However, such tools don't scale very well, and perform poorly in multi-user situations. If you find yourself needing a relational database, it's best to start with something like MySQL or MS SQL, and using one of their many graphical database management tools. While they do have a somewhat higher learning curve, their ability to scale means, you don't have to retool your work flow as your needs grow. 

## "Up-front" Data Planning Advice ##

* Determine up-front how important the data will be and treat it accordingly. Take backups seriously and design and implement the best automated backup system you can afford, then regularly audit and test backups to make sure you can restore from them. Without good backups, you are one small mishap away from major disaster. Who wants to live like that?

* Determine up-front how the data will be accessed. Strongly consider formatting your data for easy automated processing by using simple tabular structures of rows and columns in common, flexible file formats. Realize that you may want to collaborate with others and consider allowing for multiuser, simultaneous, and remote access. Sharing data files by email does not scale well and is insecure. A file sitting on a file server will not allow simultaneous editing, and one person's edited version will overwrite the whole file. Manually merging changes can be extremely difficult and error-prone. Linking separate files together properly can be challenging without specialized tools like relational databases.

* Determine up-front how long the data will be around, and what the plans will be when it's no longer useful. If the plan is to create 500,000 files/week for a decade, do the math and figure out if it's practical to store and analyze these files before you're in year 8 and things start falling apart. (True story).
